CCS PCM C Compiler, Version 4.114, 93460303               16-Jan-15 20:54

               Filename: D:\30_ELECTRONICs\80_WORK\80_Projects\02_Sounder_(ciprian)\20_SW\sounder\main.lst

               ROM used: 369 words (36%)
                         Largest free fragment is 655
               RAM used: 19 (30%) at main() level
                         21 (33%) worst case
               Stack:    3 worst case (2 in main + 1 for interrupts)

*
0000:  MOVLW  01
0001:  MOVWF  0A
0002:  GOTO   036
0003:  NOP
0004:  BTFSC  03.5
0005:  GOTO   00A
0006:  MOVWF  24
0007:  SWAPF  03,W
0008:  MOVWF  25
0009:  GOTO   00F
000A:  BCF    03.5
000B:  MOVWF  24
000C:  SWAPF  03,W
000D:  MOVWF  25
000E:  BSF    25.1
000F:  MOVF   0A,W
0010:  MOVWF  2B
0011:  CLRF   0A
0012:  BCF    03.7
0013:  SWAPF  24,F
0014:  MOVF   04,W
0015:  MOVWF  26
0016:  MOVF   20,W
0017:  MOVWF  27
0018:  MOVF   21,W
0019:  MOVWF  28
001A:  MOVF   22,W
001B:  MOVWF  29
001C:  MOVF   23,W
001D:  MOVWF  2A
001E:  BCF    03.5
001F:  BTFSS  0B.5
0020:  GOTO   023
0021:  BTFSC  0B.2
0022:  GOTO   072
0023:  MOVF   26,W
0024:  MOVWF  04
0025:  MOVF   27,W
0026:  MOVWF  20
0027:  MOVF   28,W
0028:  MOVWF  21
0029:  MOVF   29,W
002A:  MOVWF  22
002B:  MOVF   2A,W
002C:  MOVWF  23
002D:  MOVF   2B,W
002E:  MOVWF  0A
002F:  SWAPF  25,W
0030:  MOVWF  03
0031:  BCF    03.5
0032:  SWAPF  24,W
0033:  BTFSC  25.1
0034:  BSF    03.5
0035:  RETFIE
0036:  CALL   3FF
0037:  BSF    03.5
0038:  MOVWF  10
0039:  MOVLW  00
003A:  MOVWF  0A
003B:  GOTO   156
....................  
....................  
.................... #include <main.h> 
.................... #include <12F675.h> 
.................... //////// Standard Header file for the PIC12F675 device //////////////// 
.................... #device PIC12F675 
.................... #list 
....................  
....................  
.................... //#device adc=8 
....................  
....................  
.................... #FUSES NOWDT                   //No Watch Dog Timer 
.................... #FUSES INTRC_IO                //Internal RC Osc, no CLKOUT 
.................... #FUSES NOCPD                   //No EE protection 
.................... #FUSES NOPROTECT               //Code not protected from reading 
.................... #FUSES NOMCLR                  //Master Clear pin used for I/O 
.................... #FUSES NOPUT                   //No Power Up Timer 
.................... #FUSES NOBROWNOUT              //No brownout reset 
.................... //#FUSES BANDGAP_HIGH           
.................... #use delay(clock=4000000) 
....................  
.................... #include <types.h> 
....................  
....................  
.................... //typedef uint8 int8 
....................  
....................  
.................... #include <inm.h> 
....................  
....................  
....................  
.................... // CONSTANTs 
.................... // PINs 
.................... #define PIN_IN_SEAT_BELT      PIN_A0 
.................... #define PIN_IN_KL15           PIN_A1 
.................... #define PIN_IN_ACC            PIN_A2 
.................... #define PIN_IN_POS_LIGHT      PIN_A3 
.................... #define PIN_IN_DOOR           PIN_A4 
....................  
.................... #define LOW   0 
.................... #define HIGH  1 
....................  
.................... #define ON TRUE 
.................... #define OFF FALSE 
....................  
.................... #define DOOR_OPEN 1 
....................  
....................  
....................  
....................  
.................... #include <outc.h> 
....................  
.................... // CONSTANTs 
.................... // PINs 
.................... #define PIN_OUT_BUZ           PIN_A5 
....................  
.................... #define SET_BUZ_STATE(state)  setBuzState(state) 
....................  
....................  
....................  
.................... void setBuzState(int state); 
....................  
.................... #include <sounder.h> 
....................  
....................  
....................  
.................... extern void mainSounder(); 
....................  
....................  
.................... #include <inm.c> 
....................  
....................  
....................  
....................  
....................  
.................... int getDoorState(void) 
.................... { 
....................    int state; 
....................     
....................    if (input(PIN_IN_DOOR) == LOW) 
*
0089:  BSF    03.5
008A:  BSF    05.4
008B:  BCF    03.5
008C:  BTFSC  05.4
008D:  GOTO   091
....................    { 
....................       state = ON; 
008E:  MOVLW  01
008F:  MOVWF  33
....................    } 
....................    else 
0090:  GOTO   092
....................    { 
....................       state = OFF; 
0091:  CLRF   33
....................    } 
....................    return state;  
0092:  MOVF   33,W
0093:  MOVWF  21
.................... } /* getDoorState(void) */ 
0094:  RETURN
....................  
....................  
.................... int getKeyInState(void) 
.................... { 
....................    int state; 
....................     
....................    if (input(PIN_IN_ACC) == HIGH) 
0095:  BSF    03.5
0096:  BSF    05.2
0097:  BCF    03.5
0098:  BTFSS  05.2
0099:  GOTO   09D
....................    { 
....................       state = ON; 
009A:  MOVLW  01
009B:  MOVWF  33
....................    } 
....................    else 
009C:  GOTO   09E
....................    { 
....................       state = OFF; 
009D:  CLRF   33
....................    } 
....................    return state;  
009E:  MOVF   33,W
009F:  MOVWF  21
.................... } /* getKeyInState(void) */ 
00A0:  RETURN
....................  
....................  
.................... int getKl15State(void) 
.................... { 
....................    int state; 
....................     
....................    if (input(PIN_IN_KL15) == HIGH) 
00A1:  BSF    03.5
00A2:  BSF    05.1
00A3:  BCF    03.5
00A4:  BTFSS  05.1
00A5:  GOTO   0A9
....................    { 
....................       state = ON; 
00A6:  MOVLW  01
00A7:  MOVWF  33
....................    } 
....................    else 
00A8:  GOTO   0AA
....................    { 
....................       state = OFF; 
00A9:  CLRF   33
....................    } 
....................    return state;  
00AA:  MOVF   33,W
00AB:  MOVWF  21
.................... } /* getKl15State(void) */ 
00AC:  RETURN
....................  
....................  
.................... int getPosLightState(void) 
.................... { 
....................    int state; 
....................     
....................    if (input(PIN_IN_POS_LIGHT) == HIGH) 
*
00DF:  BSF    03.5
00E0:  BSF    05.3
00E1:  BCF    03.5
00E2:  BTFSS  05.3
00E3:  GOTO   0E7
....................    { 
....................       state = ON; 
00E4:  MOVLW  01
00E5:  MOVWF  33
....................    } 
....................    else 
00E6:  GOTO   0E8
....................    { 
....................       state = OFF; 
00E7:  CLRF   33
....................    } 
....................    return state;    
00E8:  MOVF   33,W
00E9:  MOVWF  21
.................... } /* getPosLightState() */ 
....................  
....................  
.................... int getSeatBeltState(void) 
.................... { 
....................    int state; 
....................     
....................    if (input(PIN_IN_SEAT_BELT) == HIGH) 
*
00C4:  BSF    03.5
00C5:  BSF    05.0
00C6:  BCF    03.5
00C7:  BTFSS  05.0
00C8:  GOTO   0CC
....................    { 
....................       state = ON; 
00C9:  MOVLW  01
00CA:  MOVWF  33
....................    } 
....................    else 
00CB:  GOTO   0CD
....................    { 
....................       state = OFF; 
00CC:  CLRF   33
....................    } 
....................    return state;    
00CD:  MOVF   33,W
00CE:  MOVWF  21
.................... } /* getSeatBeltState() */ 
....................  
.................... #include <outc.c> 
....................  
....................  
....................  
....................  
.................... void setBuzState(int state) 
.................... { 
....................    output_bit(PIN_OUT_BUZ, state); 
*
00AD:  MOVF   33,F
00AE:  BTFSS  03.2
00AF:  GOTO   0B2
00B0:  BCF    05.5
00B1:  GOTO   0B3
00B2:  BSF    05.5
00B3:  BSF    03.5
00B4:  BCF    05.5
.................... } /* setBuzState() */ 
00B5:  BCF    03.5
00B6:  RETURN
....................  
.................... #include <sounder.c> 
....................  
....................  
....................  
.................... #define BUZ_CNT_KEY   
.................... #define BUZ_CNT_LIGHT 
....................  
....................  
.................... int buzMode = 0; 
.................... int buzModeOld = 0; 
.................... int buzState = 0; 
.................... int buzCnt = 0; 
.................... int buzStep = 0; 
....................  
....................  
.................... typedef enum buz_mode_e 
.................... { 
....................    BUZ_MODE_OFF = 0, 
....................    BUZ_MODE_ON_KEY = 1, 
....................    BUZ_MODE_ON_LIGHT = 2, 
....................    BUZ_MODE_ON_BELT = 3 
.................... }; 
....................  
.................... #define BUZ_STEPS_KEY   12 
.................... #define BUZ_STEPS_POS   18 
.................... #define BUZ_STEPS_BELT   12 
.................... const int rom buzKeyIn[BUZ_STEPS_KEY] = {10, 20, 10, 150, 10, 20, 10, 150, 10, 20, 10, 150}; 
.................... const int rom buzPos[BUZ_STEPS_POS] = {10, 21, 10, 21, 10, 100, 10, 21, 10, 21, 10, 100, 10, 21, 10, 21, 10, 100}; 
.................... const int rom buzBelt[BUZ_STEPS_BELT] = {10, 250, 10, 250, 10, 250, 10, 250, 10, 250, 10, 250}; 
....................  
....................  
.................... void buzzer() 
.................... { 
....................    if (buzModeOld != buzMode) 
*
00F0:  MOVF   2C,W
00F1:  SUBWF  2D,W
00F2:  BTFSC  03.2
00F3:  GOTO   0F7
....................    { 
....................       buzStep = 0; 
00F4:  CLRF   30
....................       buzCnt = 0; 
00F5:  CLRF   2F
....................       buzState = 0; 
00F6:  CLRF   2E
....................    } 
....................     
....................    switch (buzMode) 
....................    { 
00F7:  MOVF   2C,W
00F8:  BTFSC  03.2
00F9:  GOTO   104
00FA:  XORLW  01
00FB:  BTFSC  03.2
00FC:  GOTO   107
00FD:  XORLW  03
00FE:  BTFSC  03.2
00FF:  GOTO   120
0100:  XORLW  01
0101:  BTFSC  03.2
0102:  GOTO   139
0103:  GOTO   152
....................       case BUZ_MODE_OFF: 
....................       { 
....................          SET_BUZ_STATE(0); 
0104:  CLRF   33
0105:  CALL   0AD
....................       } 
....................       break; 
0106:  GOTO   153
....................       case BUZ_MODE_ON_KEY: 
....................       { 
....................          if (buzCnt == 0) 
0107:  MOVF   2F,F
0108:  BTFSS  03.2
0109:  GOTO   11E
....................          { 
....................             if (buzStep < BUZ_STEPS_KEY) 
010A:  MOVF   30,W
010B:  SUBLW  0B
010C:  BTFSS  03.0
010D:  GOTO   11D
....................             { 
....................                buzStep++; 
010E:  INCF   30,F
....................                 
....................                buzCnt = buzKeyIn[buzStep-1]; 
010F:  MOVLW  01
0110:  SUBWF  30,W
0111:  CALL   03C
0112:  MOVWF  21
0113:  MOVWF  2F
....................              
....................                if (buzState == 1) 
0114:  DECFSZ 2E,W
0115:  GOTO   118
....................                   buzState = 0; 
0116:  CLRF   2E
....................                else 
0117:  GOTO   11A
....................                   buzState = 1; 
0118:  MOVLW  01
0119:  MOVWF  2E
....................                SET_BUZ_STATE(buzState); 
011A:  MOVF   2E,W
011B:  MOVWF  33
011C:  CALL   0AD
....................             } 
....................          } 
....................          else 
011D:  GOTO   11F
....................          { 
....................             buzCnt--; 
011E:  DECF   2F,F
....................          } 
....................       } 
....................       break; 
011F:  GOTO   153
....................       case BUZ_MODE_ON_LIGHT: 
....................       { 
....................         if (buzCnt == 0) 
0120:  MOVF   2F,F
0121:  BTFSS  03.2
0122:  GOTO   137
....................          { 
....................             if (buzStep < BUZ_STEPS_POS) 
0123:  MOVF   30,W
0124:  SUBLW  11
0125:  BTFSS  03.0
0126:  GOTO   136
....................             { 
....................                buzStep++; 
0127:  INCF   30,F
....................                 
....................                buzCnt = buzPos[buzStep-1]; 
0128:  MOVLW  01
0129:  SUBWF  30,W
012A:  CALL   04C
012B:  MOVWF  21
012C:  MOVWF  2F
....................              
....................                if (buzState == 1) 
012D:  DECFSZ 2E,W
012E:  GOTO   131
....................                   buzState = 0; 
012F:  CLRF   2E
....................                else 
0130:  GOTO   133
....................                   buzState = 1; 
0131:  MOVLW  01
0132:  MOVWF  2E
....................                SET_BUZ_STATE(buzState); 
0133:  MOVF   2E,W
0134:  MOVWF  33
0135:  CALL   0AD
....................             } 
....................          } 
....................          else 
0136:  GOTO   138
....................          { 
....................             buzCnt--; 
0137:  DECF   2F,F
....................          } 
....................       } 
....................       break; 
0138:  GOTO   153
....................       case BUZ_MODE_ON_BELT: 
....................       { 
....................         if (buzCnt == 0) 
0139:  MOVF   2F,F
013A:  BTFSS  03.2
013B:  GOTO   150
....................          { 
....................             if (buzStep < BUZ_STEPS_BELT) 
013C:  MOVF   30,W
013D:  SUBLW  0B
013E:  BTFSS  03.0
013F:  GOTO   14F
....................             { 
....................                buzStep++; 
0140:  INCF   30,F
....................                 
....................                buzCnt = buzBelt[buzStep-1]; 
0141:  MOVLW  01
0142:  SUBWF  30,W
0143:  CALL   062
0144:  MOVWF  21
0145:  MOVWF  2F
....................              
....................                if (buzState == 1) 
0146:  DECFSZ 2E,W
0147:  GOTO   14A
....................                   buzState = 0; 
0148:  CLRF   2E
....................                else 
0149:  GOTO   14C
....................                   buzState = 1; 
014A:  MOVLW  01
014B:  MOVWF  2E
....................                SET_BUZ_STATE(buzState); 
014C:  MOVF   2E,W
014D:  MOVWF  33
014E:  CALL   0AD
....................             } 
....................          } 
....................          else 
014F:  GOTO   151
....................          { 
....................             buzCnt--; 
0150:  DECF   2F,F
....................          } 
....................       } 
....................       break; 
0151:  GOTO   153
....................       default: 
....................          break; 
0152:  GOTO   153
....................    } 
....................     
....................    buzModeOld = buzMode; 
0153:  MOVF   2C,W
0154:  MOVWF  2D
.................... } 
....................  
....................  
.................... /* 
.................... @Algorithm: 
.................... buzMode shall be set KEY if all cond (AND) 
....................       DOOR == OPEN 
....................    && KEY_IN == ON 
....................    && KL15 == OFF 
....................  
.................... buzMode shall be set SEAT_BELY if all cond (AND) 
....................       SEAT_BELT == NOT_SET 
....................    && KL15 == ON 
....................     
.................... buzMode shall be set to LIGHT if all conds (AND) 
....................       DOOR == OPEN 
....................    && KEY_IN == OFF 
....................    && POS_LIGHT == ON 
....................  */ 
.................... void mainSounder() 
.................... { 
....................    if (   (getDoorState() == DOOR_OPEN) 
....................        && (getKeyInState() == ON) 
....................        && (getKl15State() == OFF) 
....................       ) 
*
00B7:  CALL   089
00B8:  DECFSZ 21,W
00B9:  GOTO   0C4
00BA:  CALL   095
00BB:  DECFSZ 21,W
00BC:  GOTO   0C4
00BD:  CALL   0A1
00BE:  MOVF   21,F
00BF:  BTFSS  03.2
00C0:  GOTO   0C4
....................    { 
....................       buzMode = BUZ_MODE_ON_KEY; 
00C1:  MOVLW  01
00C2:  MOVWF  2C
....................    } 
....................    else if (   (getSeatBeltState() == OFF) 
00C3:  GOTO   0F0
....................             && (getKl15State() == ON) 
....................            ) 
*
00CF:  MOVF   21,F
00D0:  BTFSS  03.2
00D1:  GOTO   0D8
00D2:  CALL   0A1
00D3:  DECFSZ 21,W
00D4:  GOTO   0D8
....................    { 
....................       buzMode = BUZ_MODE_ON_BELT; 
00D5:  MOVLW  03
00D6:  MOVWF  2C
....................    } 
....................    else if (   (getDoorState() == DOOR_OPEN) 
00D7:  GOTO   0F0
....................             && (getKeyInState() == OFF) 
....................             && (getPosLightState() == ON) 
....................            ) 
00D8:  CALL   089
00D9:  DECFSZ 21,W
00DA:  GOTO   0EF
00DB:  CALL   095
00DC:  MOVF   21,F
00DD:  BTFSS  03.2
00DE:  GOTO   0EF
*
00EA:  DECFSZ 21,W
00EB:  GOTO   0EF
....................    { 
....................       buzMode = BUZ_MODE_ON_LIGHT; 
00EC:  MOVLW  02
00ED:  MOVWF  2C
....................    } 
....................    else 
00EE:  GOTO   0F0
....................    { 
....................       buzMode = BUZ_MODE_OFF; 
00EF:  CLRF   2C
....................    } 
....................     
....................    buzzer(); 
....................  
.................... } 
*
0155:  GOTO   16F (RETURN)
....................  
....................  
....................  
.................... /******************************************************************************* 
....................  * GLOBAL VARS - START  */ 
....................  
.................... char tmrAlarm = 0; 
.................... char tmrEv = 0; 
....................  
....................  
.................... /* GLOBAL VARS - START 
....................  ******************************************************************************/ 
....................  
....................  
....................  
.................... /******************************************************************************* 
....................  * INTERRUPTS - START */ 
....................  
.................... #if 1 
.................... #int_RTCC 
.................... void  RTCC_isr(void)  
.................... { 
....................    tmrAlarm++; 
*
0072:  INCF   31,F
....................    if (tmrAlarm == 5) 
0073:  MOVF   31,W
0074:  SUBLW  05
0075:  BTFSS  03.2
0076:  GOTO   07A
....................    { 
....................       tmrAlarm = 0; 
0077:  CLRF   31
....................       tmrEv = 1; 
0078:  MOVLW  01
0079:  MOVWF  32
....................    } 
.................... } 
.................... #endif 
....................  
.................... #if 0 
.................... #int_EXT 
.................... void  EXT_isr(void)  
.................... { 
....................  
.................... } 
.................... #endif 
....................  
.................... #if 0 
.................... #int_RA 
.................... void  RA_isr(void)  
.................... { 
....................  
.................... } 
....................  
.................... #endif 
.................... /* INTERRUPTS - END 
....................  ******************************************************************************/ 
....................  
....................  
....................  
....................  
....................  
007A:  BCF    0B.2
007B:  BCF    0A.3
007C:  GOTO   023
.................... void init() 
.................... { 
....................    set_tris_a(0b11011111); // set GP1 output, all other inputs 
007D:  MOVLW  DF
007E:  BSF    03.5
007F:  MOVWF  05
....................     
....................    setup_timer_0(RTCC_INTERNAL|RTCC_DIV_4|RTCC_8_bit);    /* 1.0 ms overflow */ 
0080:  MOVF   01,W
0081:  ANDLW  C0
0082:  IORLW  01
0083:  MOVWF  01
....................    //setup_comparator(NC_NC); 
....................  
....................    enable_interrupts(INT_RTCC); 
0084:  BCF    03.5
0085:  BSF    0B.5
....................    enable_interrupts(GLOBAL); 
0086:  MOVLW  C0
0087:  IORWF  0B,F
.................... } /* init() */ 
0088:  GOTO   16A (RETURN)
....................  
....................  
.................... /******************************************************************************* 
....................  * MAIN - START */ 
....................  
....................  
.................... void main() 
.................... { 
*
0156:  CLRF   04
0157:  MOVLW  1F
0158:  ANDWF  03,F
0159:  CLRF   2C
015A:  CLRF   2D
015B:  CLRF   2E
015C:  CLRF   2F
015D:  CLRF   30
015E:  CLRF   31
015F:  CLRF   32
0160:  BCF    1F.6
0161:  BSF    03.5
0162:  BCF    1F.0
0163:  BCF    1F.1
0164:  BCF    1F.2
0165:  BCF    1F.3
0166:  MOVLW  07
0167:  BCF    03.5
0168:  MOVWF  19
....................    init(); 
0169:  GOTO   07D
....................     
....................    while(true) 
....................    { 
....................       while (tmrEv == 0); /* wait 5ms to pass */ 
016A:  MOVF   32,F
016B:  BTFSC  03.2
016C:  GOTO   16A
....................        
....................       tmrEv = 0; 
016D:  CLRF   32
....................       mainSounder(); 
016E:  GOTO   0B7
....................  
....................    } 
016F:  GOTO   16A
.................... } /* main() */ 
....................  
.................... /* MAIN - END 
....................  ******************************************************************************/ 
....................  
....................  
0170:  SLEEP

Configuration Fuses:
   Word  1: 3F94   INTRC_IO NOWDT NOPUT NOMCLR NOBROWNOUT NOPROTECT NOCPD
